{"ast":null,"code":"import { rechargeConstants } from \"./constants.js\";\nimport axios from \"../helpers/axios\";\nexport const addRecharge = details => {\n  return async dispatch => {\n    const res = await axios.post(\"/addRecharge\", details);\n    dispatch({\n      type: rechargeConstants.RECHARGE_REQUEST\n    });\n\n    if (res.status === 201) {\n      const {\n        data\n      } = res;\n      dispatch({\n        type: rechargeConstants.RECHARGE_SUCCESS,\n        payload: {\n          data\n        }\n      });\n    } else {\n      const {\n        error\n      } = res.data;\n      dispatch({\n        type: rechargeConstants.RECHARGE_FAILURE,\n        payload: {\n          error\n        }\n      });\n    }\n  };\n};\nexport const getRecharges = () => {\n  return async dispatch => {\n    const res = await axios.get('/getRecharges');\n    dispatch({\n      type: rechargeConstants.GET_RECHARGES_REQUEST\n    });\n\n    if (res.status === 200) {\n      const {\n        data\n      } = res;\n      dispatch({\n        type: rechargeConstants.GET_RECHARGES_SUCCESS,\n        payload: {\n          d\n        }\n      });\n    } else {\n      const {\n        error\n      } = res.data;\n      dispatch({\n        type: rechargeConstants.GET_RECHARGES_FAILURE,\n        payload: {\n          error\n        }\n      });\n    }\n  };\n};","map":{"version":3,"sources":["/home/mdalif/Desktop/coding/Flipkart_Clone/flipkart_clone/src/actions/recharge.action.js"],"names":["rechargeConstants","axios","addRecharge","details","dispatch","res","post","type","RECHARGE_REQUEST","status","data","RECHARGE_SUCCESS","payload","error","RECHARGE_FAILURE","getRecharges","get","GET_RECHARGES_REQUEST","GET_RECHARGES_SUCCESS","d","GET_RECHARGES_FAILURE"],"mappings":"AAAA,SAASA,iBAAT,QAAkC,gBAAlC;AACA,OAAOC,KAAP,MAAkB,kBAAlB;AAEA,OAAO,MAAMC,WAAW,GAAEC,OAAD,IAAW;AAClC,SAAQ,MAAOC,QAAP,IAAkB;AAEnB,UAAMC,GAAG,GAAG,MAAMJ,KAAK,CAACK,IAAN,CAAW,cAAX,EAA0BH,OAA1B,CAAlB;AACJC,IAAAA,QAAQ,CAAC;AAAEG,MAAAA,IAAI,EAAEP,iBAAiB,CAACQ;AAA1B,KAAD,CAAR;;AACA,QAAIH,GAAG,CAACI,MAAJ,KAAe,GAAnB,EAAwB;AACL,YAAM;AAACC,QAAAA;AAAD,UAAOL,GAAb;AAClBD,MAAAA,QAAQ,CAAC;AACRG,QAAAA,IAAI,EAAEP,iBAAiB,CAACW,gBADhB;AAERC,QAAAA,OAAO,EAAE;AAAEF,UAAAA;AAAF;AAFD,OAAD,CAAR;AAIA,KAND,MAMO;AACN,YAAM;AAAEG,QAAAA;AAAF,UAAYR,GAAG,CAACK,IAAtB;AACAN,MAAAA,QAAQ,CAAC;AACRG,QAAAA,IAAI,EAAEP,iBAAiB,CAACc,gBADhB;AAERF,QAAAA,OAAO,EAAE;AAAEC,UAAAA;AAAF;AAFD,OAAD,CAAR;AAIA;AACD,GAjBH;AAkBD,CAnBM;AAsBP,OAAO,MAAME,YAAY,GAAC,MAAI;AAC7B,SAAO,MAAOX,QAAP,IAAkB;AACxB,UAAMC,GAAG,GAAC,MAAMJ,KAAK,CAACe,GAAN,CAAU,eAAV,CAAhB;AACAZ,IAAAA,QAAQ,CAAC;AAAEG,MAAAA,IAAI,EAAEP,iBAAiB,CAACiB;AAA1B,KAAD,CAAR;;AACA,QAAIZ,GAAG,CAACI,MAAJ,KAAe,GAAnB,EAAwB;AACvB,YAAM;AAAEC,QAAAA;AAAF,UAAWL,GAAjB;AACAD,MAAAA,QAAQ,CAAC;AACRG,QAAAA,IAAI,EAAEP,iBAAiB,CAACkB,qBADhB;AAERN,QAAAA,OAAO,EAAE;AAAEO,UAAAA;AAAF;AAFD,OAAD,CAAR;AAIA,KAND,MAMO;AACN,YAAM;AAAEN,QAAAA;AAAF,UAAYR,GAAG,CAACK,IAAtB;AACAN,MAAAA,QAAQ,CAAC;AACRG,QAAAA,IAAI,EAAEP,iBAAiB,CAACoB,qBADhB;AAERR,QAAAA,OAAO,EAAE;AAAEC,UAAAA;AAAF;AAFD,OAAD,CAAR;AAIA;AAGD,GAlBD;AAmBA,CApBM","sourcesContent":["import { rechargeConstants } from \"./constants.js\";\nimport axios from \"../helpers/axios\";\n\nexport const addRecharge=(details)=>{\n  return  async (dispatch)=>{\n\n        \tconst res = await axios.post(\"/addRecharge\",details);\n\t\t\t\t\tdispatch({ type: rechargeConstants.RECHARGE_REQUEST });\n\t\t\t\t\tif (res.status === 201) {\n                        const {data}=res\n\t\t\t\t\t\tdispatch({\n\t\t\t\t\t\t\ttype: rechargeConstants.RECHARGE_SUCCESS,\n\t\t\t\t\t\t\tpayload: { data },\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst { error } = res.data;\n\t\t\t\t\t\tdispatch({\n\t\t\t\t\t\t\ttype: rechargeConstants.RECHARGE_FAILURE,\n\t\t\t\t\t\t\tpayload: { error },\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n    }\n}\n\n\nexport const getRecharges=()=>{\n\treturn async (dispatch)=>{\n\t\tconst res=await axios.get('/getRecharges')\n\t\tdispatch({ type: rechargeConstants.GET_RECHARGES_REQUEST });\n\t\tif (res.status === 200) {\n\t\t\tconst { data } = res;\n\t\t\tdispatch({\n\t\t\t\ttype: rechargeConstants.GET_RECHARGES_SUCCESS,\n\t\t\t\tpayload: { d },\n\t\t\t});\n\t\t} else {\n\t\t\tconst { error } = res.data;\n\t\t\tdispatch({\n\t\t\t\ttype: rechargeConstants.GET_RECHARGES_FAILURE,\n\t\t\t\tpayload: { error },\n\t\t\t});\n\t\t}\n\n\n\t}\n}\n\n"]},"metadata":{},"sourceType":"module"}