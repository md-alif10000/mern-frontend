{"ast":null,"code":"import store from \"../store\";\nimport { cartConstants } from \"./constants\";\nexport const addToCart = product => {\n  return async dispatch => {\n    const {\n      cartItems\n    } = store.getState().cart; // console.log(\"action::products\", products);\n\n    const qty = cartItems[product._id] ? parseInt(cartItems[product._id].qty + 1) : 1;\n    cartItems[product._id] = { ...product,\n      qty\n    };\n    localStorage.setItem(\"cart\", JSON.stringify(cartItems));\n    dispatch({\n      type: cartConstants.ADD_TO_CART,\n      payload: {\n        cartItems\n      }\n    });\n  };\n};\nexport const decreaseCart = product => {\n  return async dispatch => {\n    const {\n      cartItems\n    } = store.getState().cart; // console.log(\"action::products\", products);\n\n    const qty = cartItems[product._id] ? parseInt(cartItems[product._id].qty - 1) : 1;\n    cartItems[product._id] = { ...product,\n      qty\n    };\n    localStorage.setItem(\"cart\", JSON.stringify(cartItems));\n    dispatch({\n      type: cartConstants.DECREASE_CART,\n      payload: {\n        cartItems\n      }\n    });\n  };\n};\nexport const updateCart = () => {\n  return async dispatch => {\n    const cartItems = localStorage.getItem('cart') ? JSON.parse(localStorage.getItem('cart')) : null;\n\n    if (cartItems) {\n      dispatch({\n        type: cartConstants.ADD_TO_CART,\n        payload: {\n          cartItems\n        }\n      });\n    }\n  };\n};\n\nconst getCartItems = () => {\n  retur;\n};","map":{"version":3,"sources":["/home/mdalif/Desktop/coding/Flipkart_Clone/flipkart_clone/src/actions/cart.action.js"],"names":["store","cartConstants","addToCart","product","dispatch","cartItems","getState","cart","qty","_id","parseInt","localStorage","setItem","JSON","stringify","type","ADD_TO_CART","payload","decreaseCart","DECREASE_CART","updateCart","getItem","parse","getCartItems","retur"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,UAAlB;AACA,SAASC,aAAT,QAA8B,aAA9B;AAEA,OAAO,MAAMC,SAAS,GAAIC,OAAD,IAAa;AACrC,SAAO,MAAOC,QAAP,IAAoB;AAC1B,UAAM;AAAEC,MAAAA;AAAF,QAAgBL,KAAK,CAACM,QAAN,GAAiBC,IAAvC,CAD0B,CAE1B;;AAEA,UAAMC,GAAG,GAAGH,SAAS,CAACF,OAAO,CAACM,GAAT,CAAT,GACTC,QAAQ,CAACL,SAAS,CAACF,OAAO,CAACM,GAAT,CAAT,CAAuBD,GAAvB,GAA6B,CAA9B,CADC,GAET,CAFH;AAGCH,IAAAA,SAAS,CAACF,OAAO,CAACM,GAAT,CAAT,GAAyB,EACzB,GAAGN,OADsB;AAEzBK,MAAAA;AAFyB,KAAzB;AAIDG,IAAAA,YAAY,CAACC,OAAb,CAAqB,MAArB,EAA6BC,IAAI,CAACC,SAAL,CAAeT,SAAf,CAA7B;AACAD,IAAAA,QAAQ,CAAC;AACRW,MAAAA,IAAI,EAAEd,aAAa,CAACe,WADZ;AAERC,MAAAA,OAAO,EAAE;AACRZ,QAAAA;AADQ;AAFD,KAAD,CAAR;AAMA,GAlBD;AAmBA,CApBM;AAyBP,OAAO,MAAMa,YAAY,GAAIf,OAAD,IAAa;AACxC,SAAO,MAAOC,QAAP,IAAoB;AAC1B,UAAM;AAAEC,MAAAA;AAAF,QAAgBL,KAAK,CAACM,QAAN,GAAiBC,IAAvC,CAD0B,CAE1B;;AAEA,UAAMC,GAAG,GAAGH,SAAS,CAACF,OAAO,CAACM,GAAT,CAAT,GACTC,QAAQ,CAACL,SAAS,CAACF,OAAO,CAACM,GAAT,CAAT,CAAuBD,GAAvB,GAA6B,CAA9B,CADC,GAET,CAFH;AAGCH,IAAAA,SAAS,CAACF,OAAO,CAACM,GAAT,CAAT,GAAyB,EACzB,GAAGN,OADsB;AAEzBK,MAAAA;AAFyB,KAAzB;AAIDG,IAAAA,YAAY,CAACC,OAAb,CAAqB,MAArB,EAA6BC,IAAI,CAACC,SAAL,CAAeT,SAAf,CAA7B;AACAD,IAAAA,QAAQ,CAAC;AACRW,MAAAA,IAAI,EAAEd,aAAa,CAACkB,aADZ;AAERF,MAAAA,OAAO,EAAE;AACRZ,QAAAA;AADQ;AAFD,KAAD,CAAR;AAMA,GAlBD;AAmBA,CApBM;AAuBP,OAAO,MAAMe,UAAU,GAAC,MAAI;AAC3B,SAAO,MAAMhB,QAAN,IAAgB;AACtB,UAAMC,SAAS,GAACM,YAAY,CAACU,OAAb,CAAqB,MAArB,IAChBR,IAAI,CAACS,KAAL,CAAWX,YAAY,CAACU,OAAb,CAAqB,MAArB,CAAX,CADgB,GAC0B,IAD1C;;AAGA,QAAGhB,SAAH,EAAa;AACZD,MAAAA,QAAQ,CAAC;AACRW,QAAAA,IAAI,EAACd,aAAa,CAACe,WADX;AAERC,QAAAA,OAAO,EAAC;AAACZ,UAAAA;AAAD;AAFA,OAAD,CAAR;AAIA;AACD,GAVD;AAWA,CAZM;;AAeP,MAAMkB,YAAY,GAAC,MAAI;AACtBC,EAAAA,KAAK;AACL,CAFD","sourcesContent":["import store from \"../store\";\nimport { cartConstants } from \"./constants\";\n\nexport const addToCart = (product) => {\n\treturn async (dispatch) => {\n\t\tconst { cartItems } = store.getState().cart;\n\t\t// console.log(\"action::products\", products);\n\n\t\tconst qty = cartItems[product._id]\n\t\t\t? parseInt(cartItems[product._id].qty + 1)\n\t\t\t: 1;\n\t\t\tcartItems[product._id] = {\n\t\t\t...product,\n\t\t\tqty,\n\t\t};\n\t\tlocalStorage.setItem(\"cart\", JSON.stringify(cartItems));\n\t\tdispatch({\n\t\t\ttype: cartConstants.ADD_TO_CART,\n\t\t\tpayload: {\n\t\t\t\tcartItems\n\t\t\t},\n\t\t});\n\t};\n};\n\n\n\n\nexport const decreaseCart = (product) => {\n\treturn async (dispatch) => {\n\t\tconst { cartItems } = store.getState().cart;\n\t\t// console.log(\"action::products\", products);\n\n\t\tconst qty = cartItems[product._id]\n\t\t\t? parseInt(cartItems[product._id].qty - 1)\n\t\t\t: 1;\n\t\t\tcartItems[product._id] = {\n\t\t\t...product,\n\t\t\tqty,\n\t\t};\n\t\tlocalStorage.setItem(\"cart\", JSON.stringify(cartItems));\n\t\tdispatch({\n\t\t\ttype: cartConstants.DECREASE_CART,\n\t\t\tpayload: {\n\t\t\t\tcartItems\n\t\t\t},\n\t\t});\n\t};\n};\n\n\nexport const updateCart=()=>{\n\treturn async dispatch=>{\n\t\tconst cartItems=localStorage.getItem('cart') ?\n\t\tJSON.parse(localStorage.getItem('cart')) :null\n\n\t\tif(cartItems){\n\t\t\tdispatch({\n\t\t\t\ttype:cartConstants.ADD_TO_CART,\n\t\t\t\tpayload:{cartItems}\n\t\t\t})\n\t\t}\n\t}\n}\n\n\nconst getCartItems=()=>{\n\tretur\n}"]},"metadata":{},"sourceType":"module"}