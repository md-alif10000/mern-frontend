{"ast":null,"code":"import axios from \"axios\";\nimport store from \"../store\";\nimport { cartConstants } from \"./constants\";\nexport const addToCart = (product, newQty = 1) => {\n  return async dispatch => {\n    const {\n      cart: {\n        cartItems\n      },\n      auth\n    } = store.getState(); //console.log('action::products', products);\n    //const product = action.payload.product;\n    //const products = state.products;\n\n    const qty = cartItems[product._id] ? parseInt(cartItems[product._id].qty + newQty) : 1;\n    cartItems[product._id] = { ...product,\n      qty\n    };\n\n    if (auth.authenticate) {\n      dispatch({\n        type: cartConstants.ADD_TO_CART_REQUEST\n      });\n      const payload = {\n        // cartItems: Object.keys(cartItems).map((key, index) => {\n        //     return {\n        //         quantity: cartItems[key].qty,\n        //         product: cartItems[key]._id\n        //     }\n        // })\n        cartItems: [{\n          product: product._id,\n          quantity: qty\n        }]\n      };\n      console.log(payload);\n      const res = await axios.post(`/user/cart/addtocart`, payload);\n      console.log(res);\n\n      if (res.status === 201) {\n        dispatch(getCartItems());\n      }\n    } else {\n      localStorage.setItem(\"cart\", JSON.stringify(cartItems));\n    }\n\n    console.log(\"addToCart::\", cartItems);\n    dispatch({\n      type: cartConstants.ADD_TO_CART_SUCCESS,\n      payload: {\n        cartItems\n      }\n    });\n  };\n};\nexport const decreaseCart = product => {\n  return async dispatch => {\n    const {\n      cartItems\n    } = store.getState().cart; // console.log(\"action::products\", products);\n\n    const qty = cartItems[product._id] ? parseInt(cartItems[product._id].qty - 1) : 1;\n    cartItems[product._id] = { ...product,\n      qty\n    };\n    localStorage.setItem(\"cart\", JSON.stringify(cartItems));\n    dispatch({\n      type: cartConstants.DECREASE_CART,\n      payload: {\n        cartItems\n      }\n    });\n  };\n};\nexport const updateCart = () => {\n  return async dispatch => {\n    const {\n      auth\n    } = store.getState();\n    let cartItems = localStorage.getItem(\"cart\") ? JSON.parse(localStorage.getItem(\"cart\")) : null;\n    console.log(\"upppppppppp\");\n\n    if (auth.authenticate) {\n      localStorage.removeItem(\"cart\"); //dispatch(getCartItems());\n\n      if (cartItems) {\n        const payload = {\n          cartItems: Object.keys(cartItems).map((key, index) => {\n            return {\n              quantity: cartItems[key].qty,\n              product: cartItems[key]._id\n            };\n          })\n        };\n\n        if (Object.keys(cartItems).length > 0) {\n          const res = await axios.post(`/user/cart/addtocart`, payload);\n\n          if (res.status === 201) {\n            dispatch(getCartItems());\n          }\n        }\n      } else {\n        dispatch(getCartItems());\n      }\n    } else {\n      if (cartItems) {\n        dispatch({\n          type: cartConstants.ADD_TO_CART_SUCCESS,\n          payload: {\n            cartItems\n          }\n        });\n      }\n    }\n  };\n};\n\nconst getCartItems = () => {\n  return async dispatch => {\n    try {\n      dispatch({\n        type: cartConstants.ADD_TO_CART_REQUEST\n      });\n      const res = await axios.post(`/user/getCartItems`);\n\n      if (res.status === 200) {\n        const {\n          cartItems\n        } = res.data;\n        console.log({\n          getCartItems: cartItems\n        });\n\n        if (cartItems) {\n          dispatch({\n            type: cartConstants.ADD_TO_CART_SUCCESS,\n            payload: {\n              cartItems\n            }\n          });\n        }\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n};\n\nexport { getCartItems };","map":{"version":3,"sources":["/home/mdalif/Desktop/coding/Flipkart_Clone/flipkart_clone/src/actions/cart.action.js"],"names":["axios","store","cartConstants","addToCart","product","newQty","dispatch","cart","cartItems","auth","getState","qty","_id","parseInt","authenticate","type","ADD_TO_CART_REQUEST","payload","quantity","console","log","res","post","status","getCartItems","localStorage","setItem","JSON","stringify","ADD_TO_CART_SUCCESS","decreaseCart","DECREASE_CART","updateCart","getItem","parse","removeItem","Object","keys","map","key","index","length","data","error"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport store from \"../store\";\nimport { cartConstants } from \"./constants\";\n\nexport const addToCart = (product, newQty = 1) => {\n\treturn async (dispatch) => {\n\t  const {\n\t\tcart: { cartItems },\n\t\tauth,\n\t  } = store.getState();\n\t  //console.log('action::products', products);\n\t  //const product = action.payload.product;\n\t  //const products = state.products;\n\t  const qty = cartItems[product._id]\n\t\t? parseInt(cartItems[product._id].qty + newQty)\n\t\t: 1;\n\t  cartItems[product._id] = {\n\t\t...product,\n\t\tqty,\n\t  };\n  \n\t  if (auth.authenticate) {\n\t\tdispatch({ type: cartConstants.ADD_TO_CART_REQUEST });\n\t\tconst payload = {\n\t\t  // cartItems: Object.keys(cartItems).map((key, index) => {\n\t\t  //     return {\n\t\t  //         quantity: cartItems[key].qty,\n\t\t  //         product: cartItems[key]._id\n\t\t  //     }\n\t\t  // })\n\t\t  cartItems: [\n\t\t\t{\n\t\t\t  product: product._id,\n\t\t\t  quantity: qty,\n\t\t\t},\n\t\t  ],\n\t\t};\n\t\tconsole.log(payload);\n\t\tconst res = await axios.post(`/user/cart/addtocart`, payload);\n\t\tconsole.log(res);\n\t\tif (res.status === 201) {\n\t\t  dispatch(getCartItems());\n\t\t}\n\t  } else {\n\t\tlocalStorage.setItem(\"cart\", JSON.stringify(cartItems));\n\t  }\n  \n\t  console.log(\"addToCart::\", cartItems);\n  \n\t  dispatch({\n\t\ttype: cartConstants.ADD_TO_CART_SUCCESS,\n\t\tpayload: { cartItems },\n\t  });\n\t};\n  };\n\n\n\n\nexport const decreaseCart = (product) => {\n\treturn async (dispatch) => {\n\t\tconst { cartItems } = store.getState().cart;\n\t\t// console.log(\"action::products\", products);\n\n\t\tconst qty = cartItems[product._id]\n\t\t\t? parseInt(cartItems[product._id].qty - 1)\n\t\t\t: 1;\n\t\t\tcartItems[product._id] = {\n\t\t\t...product,\n\t\t\tqty,\n\t\t};\n\t\tlocalStorage.setItem(\"cart\", JSON.stringify(cartItems));\n\t\tdispatch({\n\t\t\ttype: cartConstants.DECREASE_CART,\n\t\t\tpayload: {\n\t\t\t\tcartItems\n\t\t\t},\n\t\t});\n\t};\n};\n\n\nexport const updateCart = () => {\n\treturn async (dispatch) => {\n\t  const { auth } = store.getState();\n\t  let cartItems = localStorage.getItem(\"cart\")\n\t\t? JSON.parse(localStorage.getItem(\"cart\"))\n\t\t: null;\n  \n\t  console.log(\"upppppppppp\");\n  \n\t  if (auth.authenticate) {\n\t\tlocalStorage.removeItem(\"cart\");\n\t\t//dispatch(getCartItems());\n\t\tif (cartItems) {\n\t\t  const payload = {\n\t\t\tcartItems: Object.keys(cartItems).map((key, index) => {\n\t\t\t  return {\n\t\t\t\tquantity: cartItems[key].qty,\n\t\t\t\tproduct: cartItems[key]._id,\n\t\t\t  };\n\t\t\t}),\n\t\t  };\n\t\t  if (Object.keys(cartItems).length > 0) {\n\t\t\tconst res = await axios.post(`/user/cart/addtocart`, payload);\n\t\t\tif (res.status === 201) {\n\t\t\t  dispatch(getCartItems());\n\t\t\t}\n\t\t  }\n\t\t} else {\n\t\t  dispatch(getCartItems());\n\t\t}\n\t  } else {\n\t\tif (cartItems) {\n\t\t  dispatch({\n\t\t\ttype: cartConstants.ADD_TO_CART_SUCCESS,\n\t\t\tpayload: { cartItems },\n\t\t  });\n\t\t}\n\t  }\n\t};\n  };\n\n\n  const getCartItems = () => {\n\treturn async (dispatch) => {\n\t  try {\n\t\tdispatch({ type: cartConstants.ADD_TO_CART_REQUEST });\n\t\tconst res = await axios.post(`/user/getCartItems`);\n\t\tif (res.status === 200) {\n\t\t  const { cartItems } = res.data;\n\t\t  console.log({ getCartItems: cartItems });\n\t\t  if (cartItems) {\n\t\t\tdispatch({\n\t\t\t  type: cartConstants.ADD_TO_CART_SUCCESS,\n\t\t\t  payload: { cartItems },\n\t\t\t});\n\t\t  }\n\t\t}\n\t  } catch (error) {\n\t\tconsole.log(error);\n\t  }\n\t};\n  };\n\nexport {getCartItems}"]},"metadata":{},"sourceType":"module"}