{"ast":null,"code":"import { Redirect } from \"react-router-dom\";\nimport axios from \"../helpers/axios\";\nimport { authConstants } from \"./constants\";\nexport const login = user => {\n  return async dispatch => {\n    dispatch({\n      type: authConstants.LOGIN_REQUEST\n    });\n    const res = await axios.post(\"/login\", { ...user\n    });\n\n    if (res.status === 200) {\n      const {\n        token,\n        user\n      } = res.data;\n      localStorage.setItem(\"token\", token);\n      localStorage.setItem(\"user\", JSON.stringify(user));\n      dispatch({\n        type: authConstants.LOGIN_SUCCESS,\n        payload: {\n          token,\n          user\n        }\n      });\n    } else {\n      if (res.status === 400) {\n        dispatch({\n          type: authConstants.LOGIN_FAILURE,\n          payload: {\n            error: res.data.error\n          }\n        });\n      }\n    }\n  };\n};\nexport const isUserLoggedIn = () => {\n  return async dispatch => {\n    const token = localStorage.getItem(\"token\");\n\n    if (token) {\n      const user = JSON.parse(localStorage.getItem(\"user\"));\n      dispatch({\n        type: authConstants.LOGIN_SUCCESS,\n        payload: {\n          token,\n          user\n        }\n      });\n    } else {\n      dispatch({\n        type: authConstants.LOGIN_FAILURE,\n        payload: {\n          error: \"Failed to Login\"\n        }\n      });\n    }\n  };\n};\nexport const logout = () => {\n  return async dispatch => {\n    dispatch({\n      type: authConstants.LOGOUT_REQUEST\n    });\n    const res = await axios.post('/admin/logout');\n\n    if (res.status === 200) {\n      localStorage.clear();\n      dispatch({\n        type: authConstants.LOGOUT_SUCCESS\n      });\n    } else {\n      dispatch({\n        type: authConstants.LOGOUT_FAILURE,\n        payload: {\n          error: res.data.error\n        }\n      });\n    }\n  };\n};","map":{"version":3,"sources":["/home/mdalif/Desktop/coding/Flipkart_Clone/flipkart_clone/src/actions/auth.action.js"],"names":["Redirect","axios","authConstants","login","user","dispatch","type","LOGIN_REQUEST","res","post","status","token","data","localStorage","setItem","JSON","stringify","LOGIN_SUCCESS","payload","LOGIN_FAILURE","error","isUserLoggedIn","getItem","parse","logout","LOGOUT_REQUEST","clear","LOGOUT_SUCCESS","LOGOUT_FAILURE"],"mappings":"AAAA,SAASA,QAAT,QAAyB,kBAAzB;AACA,OAAOC,KAAP,MAAkB,kBAAlB;AACA,SAASC,aAAT,QAA8B,aAA9B;AAEA,OAAO,MAAMC,KAAK,GAAIC,IAAD,IAAU;AAC7B,SAAO,MAAOC,QAAP,IAAoB;AACzBA,IAAAA,QAAQ,CAAC;AAACC,MAAAA,IAAI,EAACJ,aAAa,CAACK;AAApB,KAAD,CAAR;AACA,UAAMC,GAAG,GAAG,MAAMP,KAAK,CAACQ,IAAN,CAAW,QAAX,EAAqB,EACrC,GAAGL;AADkC,KAArB,CAAlB;;AAIA,QAAII,GAAG,CAACE,MAAJ,KAAe,GAAnB,EAAwB;AACtB,YAAM;AAAEC,QAAAA,KAAF;AAASP,QAAAA;AAAT,UAAkBI,GAAG,CAACI,IAA5B;AACAC,MAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BH,KAA9B;AACAE,MAAAA,YAAY,CAACC,OAAb,CAAqB,MAArB,EAA6BC,IAAI,CAACC,SAAL,CAAeZ,IAAf,CAA7B;AACAC,MAAAA,QAAQ,CAAC;AACPC,QAAAA,IAAI,EAAEJ,aAAa,CAACe,aADb;AAEPC,QAAAA,OAAO,EAAE;AACPP,UAAAA,KADO;AAEPP,UAAAA;AAFO;AAFF,OAAD,CAAR;AAOD,KAXD,MAWO;AACL,UAAII,GAAG,CAACE,MAAJ,KAAe,GAAnB,EAAwB;AACtBL,QAAAA,QAAQ,CAAC;AACPC,UAAAA,IAAI,EAAEJ,aAAa,CAACiB,aADb;AAEPD,UAAAA,OAAO,EAAE;AAAEE,YAAAA,KAAK,EAAEZ,GAAG,CAACI,IAAJ,CAASQ;AAAlB;AAFF,SAAD,CAAR;AAID;AACF;AACF,GAzBD;AA0BD,CA3BM;AA8BP,OAAO,MAAMC,cAAc,GAAG,MAAM;AAClC,SAAO,MAAOhB,QAAP,IAAoB;AACzB,UAAMM,KAAK,GAAGE,YAAY,CAACS,OAAb,CAAqB,OAArB,CAAd;;AACA,QAAIX,KAAJ,EAAW;AACT,YAAMP,IAAI,GAAGW,IAAI,CAACQ,KAAL,CAAWV,YAAY,CAACS,OAAb,CAAqB,MAArB,CAAX,CAAb;AACAjB,MAAAA,QAAQ,CAAC;AACPC,QAAAA,IAAI,EAAEJ,aAAa,CAACe,aADb;AAEPC,QAAAA,OAAO,EAAE;AACPP,UAAAA,KADO;AAEPP,UAAAA;AAFO;AAFF,OAAD,CAAR;AAOD,KATD,MASO;AACLC,MAAAA,QAAQ,CAAC;AACPC,QAAAA,IAAI,EAAEJ,aAAa,CAACiB,aADb;AAEPD,QAAAA,OAAO,EAAE;AAAEE,UAAAA,KAAK,EAAE;AAAT;AAFF,OAAD,CAAR;AAID;AACF,GAjBD;AAkBD,CAnBM;AAwBP,OAAO,MAAMI,MAAM,GAAG,MAAM;AAC1B,SAAO,MAAOnB,QAAP,IAAoB;AACzBA,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAACJ,aAAa,CAACuB;AADZ,KAAD,CAAR;AAIA,UAAMjB,GAAG,GAAC,MAAMP,KAAK,CAACQ,IAAN,CAAW,eAAX,CAAhB;;AACA,QAAGD,GAAG,CAACE,MAAJ,KAAa,GAAhB,EAAoB;AAClBG,MAAAA,YAAY,CAACa,KAAb;AACArB,MAAAA,QAAQ,CAAC;AACPC,QAAAA,IAAI,EAACJ,aAAa,CAACyB;AADZ,OAAD,CAAR;AAKD,KAPD,MAOK;AACHtB,MAAAA,QAAQ,CAAC;AAACC,QAAAA,IAAI,EAACJ,aAAa,CAAC0B,cAApB;AACTV,QAAAA,OAAO,EAAC;AAACE,UAAAA,KAAK,EAACZ,GAAG,CAACI,IAAJ,CAASQ;AAAhB;AADC,OAAD,CAAR;AAGD;AAKF,GAtBD;AAuBD,CAxBM","sourcesContent":["import { Redirect } from \"react-router-dom\";\nimport axios from \"../helpers/axios\";\nimport { authConstants } from \"./constants\";\n\nexport const login = (user) => {\n  return async (dispatch) => {\n    dispatch({type:authConstants.LOGIN_REQUEST})\n    const res = await axios.post(\"/login\", {\n      ...user,\n    });\n\n    if (res.status === 200) {\n      const { token, user } = res.data;\n      localStorage.setItem(\"token\", token);\n      localStorage.setItem(\"user\", JSON.stringify(user));\n      dispatch({\n        type: authConstants.LOGIN_SUCCESS,\n        payload: {\n          token,\n          user,\n        },\n      });\n    } else {\n      if (res.status === 400) {\n        dispatch({\n          type: authConstants.LOGIN_FAILURE,\n          payload: { error: res.data.error },\n        });\n      }\n    }\n  };\n}\n\n\nexport const isUserLoggedIn = () => {\n  return async (dispatch) => {\n    const token = localStorage.getItem(\"token\");\n    if (token) {\n      const user = JSON.parse(localStorage.getItem(\"user\"));\n      dispatch({\n        type: authConstants.LOGIN_SUCCESS,\n        payload: {\n          token,\n          user,\n        },\n      });\n    } else {\n      dispatch({\n        type: authConstants.LOGIN_FAILURE,\n        payload: { error: \"Failed to Login\" },\n      });\n    }\n  };\n};\n\n\n\n\nexport const logout = () => {\n  return async (dispatch) => {\n    dispatch({\n      type:authConstants.LOGOUT_REQUEST\n    })\n\n    const res=await axios.post('/admin/logout')\n    if(res.status===200){\n      localStorage.clear();\n      dispatch({\n        type:authConstants.LOGOUT_SUCCESS\n      })\n\n      \n    }else{\n      dispatch({type:authConstants.LOGOUT_FAILURE,\n      payload:{error:res.data.error}})\n\n    }\n\n\n\n \n  };\n};\n"]},"metadata":{},"sourceType":"module"}