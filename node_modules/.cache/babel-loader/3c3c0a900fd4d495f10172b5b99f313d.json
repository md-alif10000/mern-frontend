{"ast":null,"code":"import { categoryConstants } from \"../actions/constants\";\nconst initState = {\n  categories: [],\n  loading: false,\n  error: null,\n  subCategories: null\n};\n\nconst buildNewCategories = (parentId, categories, category) => {\n  let myCategories = [];\n\n  if (parentId == undefined) {\n    return [...categories, {\n      _id: category._id,\n      name: category.name,\n      slug: category.slug,\n      children: []\n    }];\n  }\n\n  for (let cat of categories) {\n    if (cat._id == parentId) {\n      myCategories.push({ ...cat,\n        children: cat.children && cat.children.length > 0 ? buildNewCategories(parentId, [...cat.children, {\n          _id: category._id,\n          name: category.name,\n          slug: category.slug,\n          parentId: category.parentId,\n          children: category.children\n        }], category) : []\n      });\n    } else {\n      myCategories.push({ ...cat,\n        children: cat.children ? buildNewCategories(parentId, cat.children, category) : []\n      });\n    }\n  }\n\n  return myCategories;\n};\n\nexport default ((state = initState, action) => {\n  switch (action.type) {\n    case categoryConstants.GET_ALL_CATEGORIES_SUCCESS:\n      state = { ...state,\n        categories: action.payload.categories\n      };\n      break;\n\n    case categoryConstants.ADD_NEW_CATEGORY_REQUEST:\n      state = { ...state,\n        loading: true\n      };\n      break;\n\n    case categoryConstants.ADD_NEW_CATEGORY_SUCCESS:\n      const category = action.payload.category;\n      const updatedCategories = buildNewCategories(category.parentId, state.categories, category);\n      console.log('updated categories', updatedCategories);\n      state = { ...state,\n        categories: updatedCategories,\n        loading: false\n      };\n      break;\n\n    case categoryConstants.ADD_NEW_CATEGORY_FAILURE:\n      state = { ...initState\n      };\n      break;\n\n    case categoryConstants.GET_SUB_CATEGORY_REQUEST:\n      state = { ...state,\n        loading: true\n      };\n      break;\n      ca;\n  }\n\n  return state;\n});","map":{"version":3,"sources":["/home/mdalif/Desktop/coding/Flipkart_Clone/flipkart_clone/src/reducers/category.reducer.js"],"names":["categoryConstants","initState","categories","loading","error","subCategories","buildNewCategories","parentId","category","myCategories","undefined","_id","name","slug","children","cat","push","length","state","action","type","GET_ALL_CATEGORIES_SUCCESS","payload","ADD_NEW_CATEGORY_REQUEST","ADD_NEW_CATEGORY_SUCCESS","updatedCategories","console","log","ADD_NEW_CATEGORY_FAILURE","GET_SUB_CATEGORY_REQUEST","ca"],"mappings":"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","sourcesContent":["import { categoryConstants } from \"../actions/constants\"\n\nconst initState={\n    categories:[],\n    loading:false,\n    error:null,\n    subCategories:null\n};\n\nconst buildNewCategories=(parentId,categories,category)=>{\n    let myCategories=[];\n    if(parentId == undefined){\n        return [\n            ...categories,\n            {\n                _id:category._id,\n                name:category.name,\n                slug:category.slug,\n                children:[]\n            }\n        ]\n    }\n\n    for(let cat of categories){\n        if(cat._id == parentId){\n\n        myCategories.push({\n            ...cat,\n            children: cat.children && cat.children.length > 0 ? buildNewCategories(parentId,[...cat.children,{_id:category._id,\n            name:category.name,\n            slug:category.slug,\n        parentId:category.parentId,\n    children:category.children}],category): []\n        });\n\n        }else{\n\n        myCategories.push({\n            ...cat,\n            children: cat.children  ? buildNewCategories(parentId,cat.children,category): []\n        });\n        }\n\n    }\nreturn myCategories;\n}\n\n\nexport default(state=initState,action)=>{ \n\n    switch(action.type){\n\n        case categoryConstants.GET_ALL_CATEGORIES_SUCCESS:\n            state = {\n                ...state,\n                categories: action.payload.categories\n            }\n            break;\n            case categoryConstants.ADD_NEW_CATEGORY_REQUEST:\n                state={\n                    ...state,\n                    loading:true\n                }\n                break;\n                case categoryConstants.ADD_NEW_CATEGORY_SUCCESS:\n\n                    const category=action.payload.category;\n\n                    const updatedCategories=buildNewCategories(category.parentId,state.categories,category);\n\n                    console.log('updated categories',updatedCategories)\n\n                    state={\n                        ...state,\n                      categories:updatedCategories,\n                        loading:false\n\n                    }\n                    break;\n                case categoryConstants.ADD_NEW_CATEGORY_FAILURE:\n                    state={\n                        ...initState,\n                      \n\n                    }\n                    break;\n                    case categoryConstants.GET_SUB_CATEGORY_REQUEST:\n                        state={\n                            ...state,\n                            loading:true,\n                        }\n                        break;\n                        ca\n    }\n    return state;\n\n}"]},"metadata":{},"sourceType":"module"}