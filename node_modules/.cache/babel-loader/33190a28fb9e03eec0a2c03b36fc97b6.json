{"ast":null,"code":"import axios from \"axios\";\nimport store from \"../store\";\nimport { cartConstants } from \"./constants\";\nexport const addToCart = (product, newQty = 1) => {\n  return async dispatch => {\n    const {\n      cart: {\n        cartItems\n      },\n      auth\n    } = store.getState();\n    const qty = cartItems[product._id] ? parseInt(cartItems[product._id].qty + newQty) : 1;\n    cartItems[product._id] = { ...product,\n      qty\n    };\n\n    if (auth.authenticate) {\n      dispatch({\n        type: cartConstants.ADD_TO_CART_REQUEST\n      });\n      const payload = {};\n    }\n\n    localStorage.setItem(\"cart\", JSON.stringify(cartItems));\n    dispatch({\n      type: cartConstants.ADD_TO_CART,\n      payload: {\n        cartItems: [{\n          product: product._id,\n          quantity\n        }]\n      }\n    });\n  };\n};\nexport const decreaseCart = product => {\n  return async dispatch => {\n    const {\n      cartItems\n    } = store.getState().cart; // console.log(\"action::products\", products);\n\n    const qty = cartItems[product._id] ? parseInt(cartItems[product._id].qty - 1) : 1;\n    cartItems[product._id] = { ...product,\n      qty\n    };\n    localStorage.setItem(\"cart\", JSON.stringify(cartItems));\n    dispatch({\n      type: cartConstants.DECREASE_CART,\n      payload: {\n        cartItems\n      }\n    });\n  };\n};\nexport const updateCart = () => {\n  return async dispatch => {\n    const cartItems = localStorage.getItem('cart') ? JSON.parse(localStorage.getItem('cart')) : null;\n\n    if (cartItems) {\n      dispatch({\n        type: cartConstants.ADD_TO_CART,\n        payload: {\n          cartItems\n        }\n      });\n    }\n  };\n};\n\nconst getCartItems = () => {\n  return async dispatch => {\n    try {\n      dispatch({\n        type: cartConstants.ADD_TO_CART_REQUEST\n      });\n      const res = await axios.post('/uset/getCartItems');\n\n      if (res.status = 200) {\n        const {\n          cartItems\n        } = res.data;\n        console.log({\n          getCartItems: cartItems\n        });\n\n        if (cartItems) {\n          dispatch({\n            type: cartConstants.ADD_TO_CART_SUCCESS,\n            payload: {\n              cartItems\n            }\n          });\n        }\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n};","map":{"version":3,"sources":["/home/mdalif/Desktop/coding/Flipkart_Clone/flipkart_clone/src/actions/cart.action.js"],"names":["axios","store","cartConstants","addToCart","product","newQty","dispatch","cart","cartItems","auth","getState","qty","_id","parseInt","authenticate","type","ADD_TO_CART_REQUEST","payload","localStorage","setItem","JSON","stringify","ADD_TO_CART","quantity","decreaseCart","DECREASE_CART","updateCart","getItem","parse","getCartItems","res","post","status","data","console","log","ADD_TO_CART_SUCCESS","error"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport store from \"../store\";\nimport { cartConstants } from \"./constants\";\n\nexport const addToCart = (product,newQty=1) => {\n\treturn async (dispatch) => {\n\t\tconst {\n\t\t\tcart:{\n\t\t\t\tcartItems\n\t\t\t},auth\n\t\t}=store.getState()\n\n\n\t\n\n\t\tconst qty = cartItems[product._id]\n\t\t\t? parseInt(cartItems[product._id].qty + newQty)\n\t\t\t: 1;\n\t\t\tcartItems[product._id] = {\n\t\t\t...product,\n\t\t\tqty,\n\t\t};\n\t\tif(auth.authenticate){\n\t\t\tdispatch({\n\t\t\t\ttype:cartConstants.ADD_TO_CART_REQUEST\n\t\t\t})\n\t\t\tconst payload={\n\n\t\t\t}\n\t\t}\n\t\tlocalStorage.setItem(\"cart\", JSON.stringify(cartItems));\n\t\tdispatch({\n\t\t\ttype: cartConstants.ADD_TO_CART,\n\t\t\tpayload: {\n\t\t\t\tcartItems:[{\n\t\t\t\t\tproduct:product._id,\n\t\t\t\t\tquantity\n\t\t\t\t}]\n\t\t\t},\n\t\t});\n\t};\n};\n\n\n\n\nexport const decreaseCart = (product) => {\n\treturn async (dispatch) => {\n\t\tconst { cartItems } = store.getState().cart;\n\t\t// console.log(\"action::products\", products);\n\n\t\tconst qty = cartItems[product._id]\n\t\t\t? parseInt(cartItems[product._id].qty - 1)\n\t\t\t: 1;\n\t\t\tcartItems[product._id] = {\n\t\t\t...product,\n\t\t\tqty,\n\t\t};\n\t\tlocalStorage.setItem(\"cart\", JSON.stringify(cartItems));\n\t\tdispatch({\n\t\t\ttype: cartConstants.DECREASE_CART,\n\t\t\tpayload: {\n\t\t\t\tcartItems\n\t\t\t},\n\t\t});\n\t};\n};\n\n\nexport const updateCart=()=>{\n\treturn async dispatch=>{\n\t\tconst cartItems=localStorage.getItem('cart') ?\n\t\tJSON.parse(localStorage.getItem('cart')) :null\n\n\t\tif(cartItems){\n\t\t\tdispatch({\n\t\t\t\ttype:cartConstants.ADD_TO_CART,\n\t\t\t\tpayload:{cartItems}\n\t\t\t})\n\t\t}\n\t}\n}\n\n\nconst getCartItems=()=>{\n\treturn async dispatch=>{\n\t\ttry{\n\t\t\tdispatch({type:cartConstants.ADD_TO_CART_REQUEST})\n\t\t\tconst res=await axios.post('/uset/getCartItems')\n\t\t\tif(res.status=200){\n\t\t\t\tconst {cartItems}=res.data\n\t\t\t\tconsole.log({getCartItems:cartItems})\n\t\t\t\tif(cartItems){\n\t\t\t\t\tdispatch({\n\t\t\t\t\t\ttype:cartConstants.ADD_TO_CART_SUCCESS,\n\t\t\t\t\t\tpayload:{cartItems}\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t}\n\t\t}catch(error){\n\t\t\tconsole.log(error)\n\n\t\t}\n\t}\n}"]},"metadata":{},"sourceType":"module"}